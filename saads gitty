import React, { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import { sha256 } from "js-sha256"; // Make sure to install: npm install js-sha256
import MatrixCanvas from "./MatrixCanvas"; // Make sure this component exists
import runTinyMLDemo from "./runTinyMLDemo"; // Your tiny ML demo function

export default function TerminalAI() {
  const [terminalLines, setTerminalLines] = useState([]);
  const [typing, setTyping] = useState("");
  const [password, setPassword] = useState("");
  const [hashPreview, setHashPreview] = useState("");
  const [name, setName] = useState("");
  const [mlOutput, setMlOutput] = useState("");
  const [running, setRunning] = useState(true);
  const [themeDark, setThemeDark] = useState(true);
  const inputRef = useRef(null);

  // Initial intro
  useEffect(() => {
    const intro = [
      "===============================================",
      "âš¡ S A A D ' S  T E R M I N A L  A I  âš¡",
      "Beginner Software Engineer â€” Pro Web Version",
      "===============================================",
      "Initializing virtual assistant... ğŸ§ ",
      "Boot sequence complete âœ…",
    ];
    setTerminalLines(intro);
  }, []);

  // Append terminal line helper
  function pushLine(line) {
    setTerminalLines((s) => [...s.slice(-200), line]);
  }

  // SHA-256 hash function
  async function sha256hex(str) {
    return sha256(str);
  }

  // Handle secure hash
  async function handleHash() {
    if (!password) return;
    pushLine("ğŸ”’ Hashing password... (client-side SHA-256)");
    const h = await sha256hex(password);
    setHashPreview(h);
    pushLine(`Password hash: ${h.substring(0, 16)}...`);
  }

  // Run ML demo
  async function handleRunML() {
    pushLine("ğŸ¤– Running tiny ML demo (TensorFlow.js)");
    setMlOutput("Running...");
    await runTinyMLDemo(setMlOutput);
    pushLine(mlOutput || "ML demo complete â€” check output panel");
  }

  // Simulated typing response
  function respond(message) {
    setTyping("");
    let i = 0;
    const speed = 20;
    const id = setInterval(() => {
      setTyping((t) => t + message.charAt(i));
      i++;
      if (i >= message.length) {
        clearInterval(id);
        pushLine(message);
        setTyping("");
      }
    }, speed);
  }

  // Minimal command parser
  async function handleCommand(raw) {
    const cmd = raw.trim().toLowerCase();
    pushLine(`> ${raw}`);
    if (!cmd) return;
    if (cmd.startsWith("hello") || cmd.startsWith("hi")) {
      respond(
        `Hello ${name || "friend"}! I'm Saad â€” here to help. Try: hash, ml, facts, clear.`
      );
    } else if (cmd === "hash") {
      await handleHash();
    } else if (cmd === "ml") {
      await handleRunML();
    } else if (cmd === "facts") {
      const facts = [
        "ğŸ’¡ I started coding because I love creating things from ideas!",
        "ğŸš€ My dream is to build something that helps millions of people.",
        "ğŸ§  I believe technology can make life better if used wisely.",
      ];
      respond(facts[Math.floor(Math.random() * facts.length)]);
    } else if (cmd === "clear") {
      setTerminalLines([]);
      pushLine("Terminal cleared.");
    } else {
      respond(
        "Sorry, I don't know that command. Try: hash, ml, facts, clear, hello"
      );
    }
  }

  // Keyboard shortcuts
  useEffect(() => {
    function onKey(e) {
      if ((e.ctrlKey || e.metaKey) && e.key === "k") {
        e.preventDefault();
        setTerminalLines([]);
        pushLine("Quick clear (Ctrl/Cmd+K)");
      }
    }
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, []);

  // Focus input on start
  useEffect(() => inputRef.current?.focus(), []);

  return (
    <div className={themeDark ? "dark" : ""}>
      <MatrixCanvas running={running} />

      <main className="min-h-screen flex items-center justify-center px-4 py-8 bg-black/30 dark:bg-black">
        <section className="max-w-5xl w-full grid md:grid-cols-2 gap-6">
          {/* Left: Terminal */}
          <div className="bg-black/70 border border-green-600/30 rounded-2xl p-6 backdrop-blur-md shadow-2xl">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <span className="w-3 h-3 bg-red-500 rounded-full" aria-hidden="true"></span>
